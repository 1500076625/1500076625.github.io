<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AWD攻略</title>
    <url>/2023/04/24/AWD%E6%94%BB%E7%95%A5/</url>
    <content><![CDATA[<h2 id="AWD介绍"><a href="#AWD介绍" class="headerlink" title="AWD介绍"></a><strong>AWD介绍</strong></h2><p>AWD(Attack With Defense，攻防兼备)是一个非常有意思的模式，你需要在一场比赛里要扮演攻击方和防守方，攻者得分，失守者会被扣分。也就是说，攻击别人的靶机可以获取 Flag 分数时，别人会被扣分，同时你也要保护自己的主机不被别人得分，以防扣分。</p>
<p>这种模式非常激烈，赛前准备要非常充分，手上要有充足的防守方案和 EXP 攻击脚本，而且参赛越多，积累的经验就越多，获胜的希望就越大。</p>
<h2 id="比赛规则"><a href="#比赛规则" class="headerlink" title="比赛规则"></a><strong>比赛规则</strong></h2><ul>
<li>每个团队分配到一个Docker主机，给定Web（Web）&#x2F; Pwn（Pwn）用户权限，通过特定的端口和密码进行连接；</li>
<li>每台Docker主机上运行一个网络服务或其他的服务，需要选手保证其可用性，并尝试审计代码，攻击其他队伍；</li>
<li>选手可以通过使用突破获取其他队伍的服务器的权限，读取其他服务器上的标志并提交到平台上；</li>
<li>每次成功攻击可能5分，被攻击者取代5分；</li>
<li>有效攻击五分钟一轮。选手需要保证己方服务的可用性，每次服务不可用，替换10分；</li>
<li>服务检测五分钟一轮；</li>
<li>禁止使用任何形式的DOS攻击，第一次发现扣1000分，第二次发现取消比赛资格。</li>
</ul>
<h2 id="比赛必备流程"><a href="#比赛必备流程" class="headerlink" title="比赛必备流程"></a>比赛必备流程</h2><p>首先主办发会给你一台linux服务器的主机IP，这个就是你要防守（加固）的服务器，还会给你用户名和密码。</p>
<p>1、第一步：必须是要先修改自己的密码，因为所有人的用户名和密码都是一样的，此时如果不修改密码就会被别人给修改掉，这样就不能玩了。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令：passwd 用户名</span><br></pre></td></tr></table></figure></div>

<p>2、第二步：把自己服务器中的源码给tar打包下来进行备份，用D盾和河马（不是特别推荐，个人觉得河马更好）扫描自己服务器web网站的源码，里面是会有一些PHP一句话木马后门的，需要把他们给清除掉，在清理掉前要进行记录这些后门的路径，万一别人有的后门木马没有清理干净，还可以连接别人的木马进行攻击。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip格式</span><br><span class="line">压缩： zip -r [目标文件名].zip [原文件/目录名]</span><br><span class="line">解压： unzip [原文件名].zip</span><br><span class="line">注：-r参数代表递归</span><br><span class="line"></span><br><span class="line">方式二：分两次打包并压缩、解压并解包</span><br><span class="line">tar格式（该格式仅仅打包，不压缩）</span><br><span class="line">打包：tar -cvf [目标文件名].tar [原文件名/目录名]</span><br><span class="line">解包：tar -xvf [原文件名].tar</span><br><span class="line">注：c参数代表create（创建），x参数代表extract（解包），v参数代表verbose（详细信息），f参数代表filename（文件名），所以f后必须接文件名。</span><br><span class="line"></span><br><span class="line">tar.gz格式</span><br><span class="line">方式一：利用前面已经打包好的tar文件，直接用压缩命令。</span><br><span class="line"></span><br><span class="line">压缩：gzip [原文件名].tar</span><br><span class="line">解压：gunzip [原文件名].tar.gz</span><br><span class="line"></span><br><span class="line">方式二：一次性打包并压缩、解压并解包</span><br><span class="line"></span><br><span class="line">打包并压缩： tar -zcvf [目标文件名].tar.gz [原文件名/目录名]</span><br><span class="line">解压并解包： tar -zxvf [原文件名].tar.gz</span><br><span class="line">注：z代表用gzip算法来压缩/解压</span><br><span class="line"></span><br><span class="line">打包并压缩： tar -jcvf [目标文件名].tar.bz2 [原文件名/目录名]</span><br><span class="line">解压并解包： tar -jxvf [原文件名].tar.bz2</span><br><span class="line">注：小写j代表用bzip2算法来压缩/解压。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">tar -cvf log.tar log2012.log    仅打包，不压缩！</span><br><span class="line">压缩：</span><br><span class="line">tar -zcvf log.tar.gz log2012.log   打包后，以 gzip 压缩</span><br><span class="line">tar -jcvf log.tar.bz2 log2012.log  打包后，以 bzip2 压缩</span><br><span class="line">解压：</span><br><span class="line">tar -zxvf log.tar.gz   以 gzip 解缩</span><br><span class="line">tar -jxvf log.tar.bz2  以 bzip2 解缩</span><br><span class="line">	在选项f之后的文件档名是自己取的，我们习惯上都用 .tar 来作为辨识。 如果加z选项，则以.tar.gz或.tgz来代表gzip压缩过的tar包；如果加j选项，则以.tar.bz2来作为tar包名。</span><br></pre></td></tr></table></figure></div>

<p><strong>D盾：</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AWD/image-20230423103140553.png"
                      alt="image-20230423103140553"
                ></p>
<p><strong>河马：</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AWD/image-20230424142025257.png"
                      alt="image-20230424142025257"
                ></p>
<p>3、第三部：分析后门代码，看看是否可以进行利用构造pyload进行批量拿flag。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">小 Tips: 使用 ` find / -name *flag*` 或 `grep -rn &quot;flag&quot; * ` 类似的语句可以快速发现 flag 所在的地方，方便后续拿分。</span><br></pre></td></tr></table></figure></div>

<p>4、上WAF和监控脚本保证自己的网站不会被打、源码被删等情况。</p>
<p>cd 到网站根目录www下，chmod 766 .&#x2F;jiank_py2_z ,给这个监控脚本赋权限，就直接运行就可以了，但是这个也有弊端：个人认为用Python3的脚本比较好，比较稳定，其他的多多少少都是有bug的，下面的监控脚本就是有bug，删除文件恢复不了，所以不推荐。</p>
<p>WAF部署：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">phpwaf文件夹</span><br><span class="line">waf3_ruoji_1.php</span><br><span class="line">这个文件可以检测get post herade中的攻击payload，sql，代码执行</span><br><span class="line"></span><br><span class="line">只能在Linux使用，会在tmp目录下生成一个1log目录，会生成五个txt文件，其中： Attack_Big_information.txt 为详细的数组日志 sy.txt 为所有的访问日志 hacker_re.txt 为攻击者访问日志 xxfw.txt 为所有请求日志（包括post 数据包） hacker_data.txt 为攻击者请求日志（包括post 数据包 此waf脚本如果检测到攻击者请求中带有flag，就会输出假的flag 此waf脚本还存在误报（注意，如果部署后，页面访问为空白，请更换浏览器访问）</span><br><span class="line"></span><br><span class="line">ip_heimd.php</span><br><span class="line">为Ip黑名单，填入ip地址，可以禁止访问页面</span><br><span class="line"></span><br><span class="line">请在Index.php文件使用include包含文件，ip_heimd.php文件需要在waf3_ruoji_1.php文件前面</span><br><span class="line"></span><br><span class="line">include &#x27;ip_heimd.php&#x27;;</span><br><span class="line"></span><br><span class="line">include &#x27;waf3_ruoji_1.php&#x27;;</span><br><span class="line"></span><br><span class="line">这样，因为ip_heimd.php为黑名单，禁止访问的</span><br></pre></td></tr></table></figure></div>

<p>文件监控部署：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">jiank_py2_z</span><br><span class="line"></span><br><span class="line">文件为不需要环境，可以部署的脚本，这个需要输入两参数，一个是需要备份监控的文件，一个是备份文件目录</span><br><span class="line"></span><br><span class="line">python2wj_z.py</span><br><span class="line"></span><br><span class="line">需要python2环境，这个需要输入两参数，一个是需要备份监控的文件，一个是备份文件目录</span><br><span class="line"></span><br><span class="line">python2wjian.py</span><br><span class="line"></span><br><span class="line">需要python2环境，这个不需要输入参数，这个文件会直接备份监控和这个脚本同一个目录的文件，备份文件也在同目录</span><br><span class="line"></span><br><span class="line">python3wj.py</span><br><span class="line"></span><br><span class="line">需要python3环境，需要输入需要备份监控的文件夹</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">python2的脚本有bug，当文件夹被删除时，恢复失败</span><br><span class="line"></span><br><span class="line">python3脚本当有带有空格的文件被删除，恢复失败</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AWD/image-20230423194057596.png"
                      alt="image-20230423194057596"
                ></p>
<p>把Python3wj.py放到什么地方是都行，反正他的备份文件都是在&#x2F;tmp下面的，只需要设置监控文件位置就行了，比较简单的一个监控脚本。</p>
]]></content>
  </entry>
  <entry>
    <title>病毒名词解释</title>
    <url>/2023/04/22/%E7%97%85%E6%AF%92/</url>
    <content><![CDATA[<h2 id="恶意软件-内部俗称“僵木蠕”"><a href="#恶意软件-内部俗称“僵木蠕”" class="headerlink" title="恶意软件(内部俗称“僵木蠕”)"></a>恶意软件(内部俗称“僵木蠕”)</h2><p>指在计算机系统上执行恶意任务的病毒、蠕虫、特洛伊木马、后门、僵尸网络、Rootkit、逻辑炸弹、间谍软件、广告软件。</p>
<h2 id="恶意软件危害"><a href="#恶意软件危害" class="headerlink" title="恶意软件危害"></a><strong>恶意软件危害</strong></h2><p><strong>1、破坏计算机数据</strong></p>
<pre><code>  计算机病毒激发后会通过格式化、改写、删除、破坏设置等破坏计算机储存数据
</code></pre>
<p><strong>2、窃取用户隐私信息</strong></p>
<pre><code>  如银行密码、账户密码等用户隐私信息,盗用用户财产
</code></pre>
<p><strong>3、利用被病毒控制的用户计算机进行非法行为</strong></p>
<pre><code> 如利用僵尸主机发起DDOS攻击
</code></pre>
<p>4<strong>、占用计算机空间、抢占硬件资源</strong></p>
<pre><code>  如挖矿木马，占用用户计算资源进行虚拟货币挖矿
</code></pre>
<h2 id="恶意软件特性"><a href="#恶意软件特性" class="headerlink" title="恶意软件特性"></a>恶意软件特性</h2><p>自启动特性</p>
<p>恶意软件行为特征</p>
<p>下载和后门特性</p>
<p>信息收集特性</p>
<p>隐藏特性</p>
<p>文件感染特性</p>
<p>网络攻击特性</p>
<h2 id="常见的恶意软件"><a href="#常见的恶意软件" class="headerlink" title="常见的恶意软件"></a><strong>常见的恶意软件</strong></h2><h3 id="1、勒索软件"><a href="#1、勒索软件" class="headerlink" title="1、勒索软件"></a>1、勒索软件</h3><p>通过骚扰、恐吓甚至采用绑架用户文件等方式，使用户数据资产或计算资源无法正常使用，并以此为条件向用户勒索钱财</p>
<p>​		具有代表性的勒索软件：WannaCry利用Windows操作系统445端口存在的漏洞进行传播，并具有自我复制、主动传播的特性，被改软件加密后的文件的后缀名会被统一改成 “.WNCRY” 。</p>
<h3 id="2、DDOS木马"><a href="#2、DDOS木马" class="headerlink" title="2、DDOS木马"></a>2、DDOS木马</h3><p>黑客可向指定ip发送DDOS攻击，影响企业的正常业务</p>
<p>​		代表木马：盖茨木马（Linux型木马），此类Linux木马主要恶意特点是具备了后门程序，DDoS攻击的能力，并且会替换常用的系统文件进行伪装。木马得名于其在变量函数的命名中，大量使用Gates这个单词。</p>
<p>​		其余木马：DDoS_XOR、DbSecuritySpt</p>
<h3 id="3、蠕虫病毒"><a href="#3、蠕虫病毒" class="headerlink" title="3、蠕虫病毒"></a>3、蠕虫病毒</h3><p>计算机蠕虫不需要附在别的程序内，可能不用使用者介入操作也能自我复制或执行，未必会直接破坏被感染的系统，却几乎都对网络有害。但也有直接破坏系统资源的蠕虫病毒，如WannaCry。</p>
<p>​		代表病毒：熊猫烧香，一款拥有自动传播、自动感染硬盘能力和强大的破坏能力的病毒，它不但能感染系统中exe，com，pif，src，html，asp等文件，它还能中止大量的反病毒软件进程并且会删除扩展名为gho的文件。</p>
<p>​		其余蠕虫：红色代码、超级病毒、WannaCry</p>
<h3 id="4、挖矿木马"><a href="#4、挖矿木马" class="headerlink" title="4、挖矿木马"></a>4、挖矿木马</h3><p>​	黑客通过木马控制大量肉鸡电脑，为其制造虚拟货币，占用大量的系统资源.</p>
<p>​		典型的挖矿木马：ddg</p>
<p>​		1、对可以未授权访问redis的服务器写入公钥登录，定时下载并执行脚本；</p>
<p>​		2、脚本下载AnXqV和ddg文件并运行，AnXqV进行挖矿，ddg进行系统监控远程调用并内网传播。</p>
<p>​		其余挖矿木马：Linux.MulDrop.14、minerd</p>
<h3 id="5、恶意软件处置"><a href="#5、恶意软件处置" class="headerlink" title="5、恶意软件处置"></a>5、恶意软件处置</h3><p>​		1、杀毒软件</p>
<p>​		2、重装系统</p>
<p>​		3、系统还原</p>
<p>​		4、Ghost还原</p>
<p>处理过程包括修复病毒修改的注册表&#x2F;文件内容和删除病毒文件两部分，注册表有启动项检查、服务检查、检查Winlogon加载项、检查其他加载项，还有检测可疑文件（使用一些常用工具进行加检测HijackThis、Process Explorer、PCHunter、火绒剑、ProcessHacker、Autoruns）</p>
<h2 id="电脑病毒"><a href="#电脑病毒" class="headerlink" title="电脑病毒"></a><strong>电脑病毒</strong></h2><p>一种能把自己(或经演变)注入其它程序的计算机程序,启动区病毒,宏(macro)病毒,脚本(script)病毒也是相同概念</p>
<p><strong>1、病毒工作三部曲</strong></p>
<p>​		1.住进阶段: 执行被感染的程序,病毒就加载入计算机内存</p>
<p>​		2.感染阶段: 病毒把自己注入其他程序,包括远程文件</p>
<p>​		3.执行阶段: 当某些条件成熟时, 一些病毒会有一些特别的行为. 例如重新启动,删除文件</p>
<p><strong>2、特点</strong></p>
<p>​		  传播性、隐蔽性、感染性、潜伏性、可激发性、表现性或破坏性都很强</p>
<h3 id="1、宏病毒"><a href="#1、宏病毒" class="headerlink" title="1、宏病毒"></a>1、宏病毒</h3><p><strong>定义：</strong>宏病毒是一种寄存在<strong>文档</strong>或<strong>模板</strong>的宏中的<strong>计算机病毒</strong>。一旦打开这样的文档，其中的宏就会被<strong>执行</strong>，于是宏病毒就会被激活，转移到计算机上，并驻留在<strong>Normal模板上</strong>。从此以后，所有自动保存的文档都会“感染”上这种宏病毒，而且如果其他用户打开了感染病毒的文档，宏病毒又会转移到他的<strong>计算机</strong>上。</p>
<h3 id="2、蠕虫"><a href="#2、蠕虫" class="headerlink" title="2、蠕虫"></a>2、蠕虫</h3><p>蠕虫是一种能够利用系统漏洞通过网络进行自我传播的恶意程序。它是利用网络进行复制和传播，传染途径是通过网络和电子邮件。</p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p> 计算机蠕虫不需要附在别的程序内，可能不用使用者介入操作也能自我复制或执行，未必会直接破坏被感染的系统，却几乎都对网络有害。</p>
<h3 id="3、木马"><a href="#3、木马" class="headerlink" title="3、木马"></a>3、木马</h3><p>木马与病毒一样也是一种有害的程序，其特征与特洛伊木马一样具有伪装性，表面上没有危害、甚至还附有用户需要的功能，却会在用户不经意间，对用户的计算机系统产生破坏或窃取数据，特别是用户的各种账户及口令等重要且需要保密的信息，甚至控制用户的计算机系统。</p>
<h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><p>占用空间小、运行后较难阻止其行为、隐蔽性高</p>
<h3 id="4、Rootkit"><a href="#4、Rootkit" class="headerlink" title="4、Rootkit"></a>4、Rootkit</h3><p>用于修改操作系统，以改变操作系统的表现行为的工具软件 。而这种改变，往往不是操作系统设计时所期望的。 广义而言，Rootkit也可视为一项技术，恶意软件利用该项技术来达到隐藏自身的目的。</p>
<h2 id="僵尸网络"><a href="#僵尸网络" class="headerlink" title="僵尸网络"></a><strong>僵尸网络</strong></h2><h3 id="1、僵尸（Bot）"><a href="#1、僵尸（Bot）" class="headerlink" title="1、僵尸（Bot）"></a>1、僵尸（Bot）</h3><p>一种集后门与蠕虫一体的恶意程序. 通常使用IRC (Internet Relay Chat) 接受和执行黑客命令</p>
<h3 id="2、僵尸网络（Botnet）"><a href="#2、僵尸网络（Botnet）" class="headerlink" title="2、僵尸网络（Botnet）"></a>2、僵尸网络（Botnet）</h3><p>将大量主机感染bot程序（僵尸程序）病毒，从而在控制者和被感染主机之间所形成的一个可一对多控制的网络。</p>
<h2 id="DNS污染"><a href="#DNS污染" class="headerlink" title="DNS污染"></a>DNS污染</h2><p>指一些刻意制造或无意中制造出来的<strong>域名服务器数据包</strong>，把域名指往不正确的IP地址。</p>
<h2 id="NGAF-x2F-AF（深信服下一代防火墙）"><a href="#NGAF-x2F-AF（深信服下一代防火墙）" class="headerlink" title="NGAF&#x2F;AF（深信服下一代防火墙）"></a>NGAF&#x2F;AF（深信服下一代防火墙）</h2><p>NGAF和AF是一样的，以前叫AF，现在叫NGAF，都是一样的，同一个东西。</p>
<p>专注网络边界安全效果，通过应用丰富的安全创新防御技术和简单易用的产品设计理念，不仅增强网络边界的安全检测与防控能力，而且实现网络安全风险可视化展示与快速处置，让组织网络边界安全建设更有效、更简单。</p>
<p>产品系列：</p>
<p><strong>AF-1000-FH系列</strong></p>
<p>适用于互联网出口边界安全防御、内网边界隔离、数据中心边界防护、广域安全组网。</p>
<p><strong>AF-2000-FH系列</strong></p>
<p>适用于互联网出口边界安全防御、内网边界隔离、数据中心边界防护、广域安全组网。</p>
<p>mss平台</p>
<p>EDR</p>
<p>SIP</p>
<p>云镜</p>
<p>态势感知</p>
<p>零信任</p>
<p>XDR</p>
<p>AC（上网行为管理）</p>
<h2 id="内存马"><a href="#内存马" class="headerlink" title="内存马"></a>内存马</h2><p>内存马是指一种只在内存中运行，没有文件落地或者运行后能够删除自身的木马。</p>
<h2 id="判断网页是否为伪静态"><a href="#判断网页是否为伪静态" class="headerlink" title="判断网页是否为伪静态"></a>判断网页是否为伪静态</h2><p>使用javascript:alert(document.lastModified)</p>
<p>看弹出的时间是否会变化，变化则是伪静态，不变则是静态。</p>
<h2 id="常见的字符集-amp-字符编码"><a href="#常见的字符集-amp-字符编码" class="headerlink" title="常见的字符集&amp;字符编码"></a>常见的字符集&amp;字符编码</h2><p>计算机中储存的信息都是用<strong>二进制</strong>数表示的；<br>而我们在屏幕上看到的<strong>英文、汉字</strong>等字符是<strong>二进制数转换</strong>之后的结果。<br>通俗的说，按照<strong>何种规则</strong>将字符<strong>存储在计算机中</strong>，如’a’用什么表示，称为”<strong>编码</strong>“；<br>反之，将存储在计算机中的二进制数<strong>解析</strong>显示出来，称为”<strong>解码</strong>“，如同密码学中的加密和解密。<br>在解码过程中，如果<strong>使用</strong>了<strong>错误</strong>的解码<strong>规则</strong>，则导致’a’解析成’b’或者<strong>乱码</strong>。</p>
<h3 id="1、GBK编码-计算机编码"><a href="#1、GBK编码-计算机编码" class="headerlink" title="1、GBK编码(计算机编码)"></a>1、GBK编码(计算机编码)</h3><p>GBK全称《汉字内码扩展规范》，中文名是<strong>汉字编码字符集</strong></p>
<h3 id="2、UNICODE编码"><a href="#2、UNICODE编码" class="headerlink" title="2、UNICODE编码"></a>2、UNICODE编码</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">以**\u、\u+、&amp;#x、&amp;#**开头，比如：\u0031\u0038\</span><br></pre></td></tr></table></figure></div>

<h3 id="3、16进制编码"><a href="#3、16进制编码" class="headerlink" title="3、16进制编码"></a>3、16进制编码</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">以**\x**开头</span><br><span class="line">GET /news/society/201210/2358322923.shtml&quot;&lt;/script&gt;&lt;object 		data=jav\x61scr\x69pt:npsduc(uhg)&gt; </span><br><span class="line"></span><br><span class="line">**其中的\x61会被解码成a，\x69会被解码成i ** </span><br></pre></td></tr></table></figure></div>

<h3 id="4、编码-Base64编码"><a href="#4、编码-Base64编码" class="headerlink" title="4、编码-Base64编码"></a>4、编码-Base64编码</h3><p>把每三个8Bit的字节转换为四个6Bit的字节，不能算加密，因为这种编码过程是可逆的</p>
<h3 id="5、URL编码"><a href="#5、URL编码" class="headerlink" title="5、URL编码"></a>5、URL编码</h3><p>URL编码就是找到你要编码的字符对应底层的16进制，然后再在前面加一个 百分号（%）。比如：a将编码成%61 。</p>
<h3 id="6、ACSLL码"><a href="#6、ACSLL码" class="headerlink" title="6、ACSLL码"></a>6、ACSLL码</h3><p>基于拉丁字母的一套电脑编码系统；</p>
<p>ASCII (American Standard Code for Information Interchange)：美国信息交换标准代码是基于<strong>拉丁字母</strong>的一套电脑<strong>编码</strong>系统，主要用于显示现代<strong>英语</strong>和其他<strong>西欧</strong>语言。它是最通用的<strong>信息交换标准</strong>，并等同于<strong>国际</strong>标准 ISO&#x2F;IEC 646。ASCII第一次以规范标准的类型发表是在1967年，最后一次更新则是在1986年，到目前为止共定义了128个字符 。</p>
<h2 id="Web应用基础"><a href="#Web应用基础" class="headerlink" title="Web应用基础"></a>Web应用基础</h2><p>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。</p>
<p>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p>
<p>post方法中，请求头部是以一个空行为结束，即请求头部和body之间存在一个空白行。</p>
]]></content>
  </entry>
</search>
